"""
Vulnerability Detection Module
Identifies common Windows vulnerabilities
"""

import re
from utils.logger import get_logger

class VulnerabilityDetector:
    def __init__(self, config):
        self.config = config
        self.logger = get_logger(__name__)
        self.vulnerability_checks = [
            self._check_smb_v1,
            self._check_eternal_blue,
            self._check_weak_smb_signing,
            self._check_llmnr_poisoning,
            self._check_weak_rdp,
            self._check_anonymous_smb,
            self._check_weak_services
        ]
    
    def detect_vulnerabilities(self, scan_results):
        """Main vulnerability detection function"""
        vulnerabilities = []
        
        for host in scan_results['host_discovery']:
            self.logger.info(f"Analyzing vulnerabilities for {host}")
            
            host_vulns = []
            for check in self.vulnerability_checks:
                vuln = check(host, scan_results)
                if vuln:
                    host_vulns.extend(vuln if isinstance(vuln, list) else [vuln])
            
            if host_vulns:
                vulnerabilities.extend(host_vulns)
        
        self.logger.info(f"Found {len(vulnerabilities)} potential vulnerabilities")
        return vulnerabilities
    
    def _check_smb_v1(self, host, scan_results):
        """Check for SMBv1 vulnerability"""
        if host not in scan_results['port_scan'] or 445 not in scan_results['port_scan'][host]:
            return None
        
        # In practice, this would involve actual SMB protocol testing
        return {
            'host': host,
            'vulnerability': 'SMBv1 Enabled',
            'severity': 'High',
            'description': 'SMBv1 is enabled and vulnerable to various attacks',
            'cve': 'CVE-2017-0144',
            'exploit_available': True,
            'port': 445
        }
    
    def _check_eternal_blue(self, host, scan_results):
        """Check for EternalBlue vulnerability (MS17-010)"""
        if host not in scan_results['port_scan'] or 445 not in scan_results['port_scan'][host]:
            return None
        
        # This would involve actual vulnerability testing
        return {
            'host': host,
            'vulnerability': 'MS17-010 EternalBlue',
            'severity': 'Critical',
            'description': 'System vulnerable to EternalBlue SMB exploit',
            'cve': 'CVE-2017-0144',
            'exploit_available': True,
            'port': 445
        }
    
    def _check_weak_smb_signing(self, host, scan_results):
        """Check for weak SMB signing configuration"""
        if host not in scan_results['smb_enumeration']:
            return None
        
        return {
            'host': host,
            'vulnerability': 'SMB Signing Not Required',
            'severity': 'Medium',
            'description': 'SMB signing is not required, allowing relay attacks',
            'cve': 'N/A',
            'exploit_available': True,
            'port': 445
        }
    
    def _check_llmnr_poisoning(self, host, scan_results):
        """Check for LLMNR poisoning vulnerability"""
        # This would check if LLMNR is enabled
        return {
            'host': host,
            'vulnerability': 'LLMNR Poisoning',
            'severity': 'Medium',
            'description': 'LLMNR is enabled and can be poisoned for credential theft',
            'cve': 'N/A',
            'exploit_available': True,
            'port': 5355
        }
    
    def _check_weak_rdp(self, host, scan_results):
        """Check for weak RDP configuration"""
        if host not in scan_results['port_scan'] or 3389 not in scan_results['port_scan'][host]:
            return None
        
        return {
            'host': host,
            'vulnerability': 'RDP Exposed',
            'severity': 'Medium',
            'description': 'RDP is exposed and may be vulnerable to brute force attacks',
            'cve': 'N/A',
            'exploit_available': True,
            'port': 3389
        }
    
    def _check_anonymous_smb(self, host, scan_results):
        """Check for anonymous SMB access"""
        if host not in scan_results['smb_enumeration']:
            return None
        
        return {
            'host': host,
            'vulnerability': 'Anonymous SMB Access',
            'severity': 'Low',
            'description': 'SMB allows anonymous access to shares',
            'cve': 'N/A',
            'exploit_available': False,
            'port': 445
        }
    
    def _check_weak_services(self, host, scan_results):
        """Check for weak or outdated services"""
        vulnerabilities = []
        
        if host in scan_results['service_enumeration']:
            services = scan_results['service_enumeration'][host]
            
            for port, service_info in services.items():
                banner = service_info.get('banner', '').lower()
                
                # Check for outdated services based on banners
                if 'apache/2.2' in banner:
                    vulnerabilities.append({
                        'host': host,
                        'vulnerability': 'Outdated Apache Server',
                        'severity': 'Medium',
                        'description': 'Apache 2.2 is outdated and may contain vulnerabilities',
                        'cve': 'Multiple',
                        'exploit_available': True,
                        'port': port
                    })
                
                if 'iis/6.0' in banner:
                    vulnerabilities.append({
                        'host': host,
                        'vulnerability': 'Outdated IIS Server',
                        'severity': 'High',
                        'description': 'IIS 6.0 is severely outdated and vulnerable',
                        'cve': 'Multiple',
                        'exploit_available': True,
                        'port': port
                    })
        
        return vulnerabilities if vulnerabilities else None
